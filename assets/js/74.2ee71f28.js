(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{513:function(n,e,s){"use strict";s.r(e);var t=s(43),a=Object(t.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"webpack-优化配置之-code-splitting-多入口打包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webpack-优化配置之-code-splitting-多入口打包"}},[n._v("#")]),n._v(" webpack 优化配置之 Code Splitting 多入口打包")]),n._v(" "),s("p",[n._v("所有模块打包在一起，会导致 "),s("code",[n._v("bundle")]),n._v(" 文件体积过大。而实际上应用在开始工作时，并不是每个模块在启动时都是必须要加载进来的。更合理的做法是将代码通过合理的规则拆分成多个 "),s("code",[n._v("bundle")]),n._v("，根据应用的运行需要进行按需加载这些模块，这样可以大大提高应用的响应速度与运行效率。")]),n._v(" "),s("p",[s("code",[n._v("webpack")]),n._v(" 实现分包的方式有两种：")]),n._v(" "),s("ul",[s("li",[n._v("多入口打包")]),n._v(" "),s("li",[n._v("动态导入")])]),n._v(" "),s("p",[n._v("下面来看一下如何配置多入口打包。")]),n._v(" "),s("p",[n._v("多入口打包一般是用于传统的多页面程序，最常见的划分规则是一个页面对应一个入口，对于不同的页面的公共部分单独提取到公共文件中。")]),n._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/jwchan1996/webpack-play/blob/main/16-multiple-entry",target:"_blank",rel:"noopener noreferrer"}},[n._v("示例代码仓库"),s("OutboundLink")],1)]),n._v(" "),s("p",[n._v("下面是一个具有多页面的应用，下面将 "),s("code",[n._v("webpack")]),n._v(" 的单入口配置为多入口。")]),n._v(" "),s("div",{staticClass:"language-diff extra-class"},[s("pre",{pre:!0,attrs:{class:"language-diff"}},[s("code",[s("span",{pre:!0,attrs:{class:"token unchanged"}},[n._v("  // webpack.config.js\n  const path = require('path')\n  const { CleanWebpackPlugin } = require('clean-webpack-plugin')\n  const HtmlWebpackPlugin = require('html-webpack-plugin')\n")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token unchanged"}},[n._v("  module.exports = {\n    mode: 'none',\n")]),s("span",{pre:!0,attrs:{class:"token deleted-sign deleted"}},[n._v("-   entry: '/src/index.js',\n")]),s("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[n._v("+   entry: {\n+     index: './src/index.js',\n+     album: './src/album.js'\n+   },\n")]),s("span",{pre:!0,attrs:{class:"token unchanged"}},[n._v("    output: {\n")]),s("span",{pre:!0,attrs:{class:"token deleted-sign deleted"}},[n._v("-     filename: 'bundle.js',\n")]),s("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[n._v("+     filename: '[name].bundle.js',\n")]),s("span",{pre:!0,attrs:{class:"token unchanged"}},[n._v("      path: path.join(__dirname, 'dist')\n    },\n    module: {\n      rules: [\n        {\n          test: /\\.css$/,\n          use: [\n            'style-loader',\n            'css-loader'\n          ]\n        }\n      ]\n    },\n    plugins: [\n      // CleanWebpackPlugin 默认根据配置的 output.path 路径进行清空，不配置 output.path 不生效\n      new CleanWebpackPlugin(),\n      new HtmlWebpackPlugin({\n        title: 'Multi Entry',\n        template: './src/index.html',\n        filename: 'index.html',\n")]),s("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[n._v("+        // 允许插入到模板中的一些 chunk，不配置此项默认会将 entry 中所有的 chunk 注入到模板中\n+       chunks: ['index'] \n")]),s("span",{pre:!0,attrs:{class:"token unchanged"}},[n._v("      }),\n")]),s("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[n._v("+     new HtmlWebpackPlugin({\n+       title: 'Multi Entry',\n+       template: './src/album.html',\n+       filename: 'album.html',\n+       chunks: ['album']\n+     })\n")]),s("span",{pre:!0,attrs:{class:"token unchanged"}},[n._v("    ]\n  }\n")]),n._v("\n")])])]),s("p",[n._v("配置后，既可以进行正常的多入口打包，可以看到输出了多个 "),s("code",[n._v("html")]),n._v(" 入口文件。")]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[n._v("├── dist\n│   ├── album.bundle.js\n│   ├── album.js\n│   ├── index.bundle.js\n│   └── index.js\n")])])]),s("p",[n._v("多入口打包下，不同入口中肯定会有公共模块，按照上面方法的话 "),s("code",[n._v("bundle")]),n._v(" 中会有相同的模块出现。")]),n._v(" "),s("p",[n._v("那怎么提取公共模块呢？配置如下面所示，打包后会多出个公共模块文件。")]),n._v(" "),s("div",{staticClass:"language-diff extra-class"},[s("pre",{pre:!0,attrs:{class:"language-diff"}},[s("code",[s("span",{pre:!0,attrs:{class:"token unchanged"}},[n._v("  // webpack.config.js\n  ...\n  ...\n")]),n._v("\n"),s("span",{pre:!0,attrs:{class:"token unchanged"}},[n._v("  module.exports = {\n    ...\n    ...\n")]),s("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[n._v("+   optimization: {\n+     splitChunks: {\n+       // 对所有的 chunk 提取公共 chunk\n+       chunks: 'all',\n+       // webpack 5 不再支持自动命名，需要手动配置\n+       name: 'common-chunk'\n+     }\n+   },\n")]),s("span",{pre:!0,attrs:{class:"token unchanged"}},[n._v("    module: {\n      ...\n      ...\n    }\n  }\n")])])])]),s("p",[n._v("运行打包命令后:")]),n._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[n._v("├── dist\n│   ├── album.bundle.js\n│   ├── album.js\n│   ├── common-chunk.bundle.js\n│   ├── index.bundle.js\n│   └── index.js\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);