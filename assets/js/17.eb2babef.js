(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{419:function(t,s,a){t.exports=a.p+"assets/img/01.5833530d.png"},420:function(t,s,a){t.exports=a.p+"assets/img/02.ce117cb6.png"},506:function(t,s,a){"use strict";a.r(s);var n=a(43),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"plugin-插件机制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#plugin-插件机制"}},[t._v("#")]),t._v(" Plugin 插件机制")]),t._v(" "),n("h2",{attrs:{id:"工作原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[t._v("#")]),t._v(" 工作原理")]),t._v(" "),n("p",[t._v("相比于 "),n("code",[t._v("Loader")]),t._v("，"),n("code",[t._v("Plugin")]),t._v(" 的能力范围要更宽一些。"),n("code",[t._v("Loader")]),t._v(" 是在加载模块的环节去工作，而 "),n("code",[t._v("Plugin")]),t._v(" 几乎触及到 "),n("code",[t._v("webpack")]),t._v(" 工作的每一个环节。那么 "),n("code",[t._v("Plugin")]),t._v(" 是怎么实现的呢？其实是利用了我们开发工程中常用的钩子机制去实现的。")]),t._v(" "),n("p",[n("code",[t._v("webpack")]),t._v(" 为了能够更好的扩展，在整个打包过程的各个节点留下了很多预先定义好的钩子，这样插件 "),n("code",[t._v("Plugin")]),t._v(" 就可以往这些节点上挂载不同的任务，可以轻松地去扩展 "),n("code",[t._v("webpack")]),t._v(" 的能力。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(419),alt:"01"}})]),t._v(" "),n("h2",{attrs:{id:"实现一个插件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现一个插件"}},[t._v("#")]),t._v(" 实现一个插件")]),t._v(" "),n("p",[n("code",[t._v("webpack")]),t._v(" 要求 "),n("code",[t._v("Plugin")]),t._v(" 是一个函数或者是一个包含 "),n("code",[t._v("apply")]),t._v(" 方法的对象。一般会把这个 "),n("code",[t._v("Plugin")]),t._v(" 定义为一个类型，然后在这个类型中定义一个 "),n("code",[t._v("apply")]),t._v(" 方法。在使用中就是利用这个类型去构建一个实例，从而调用实例的 "),n("code",[t._v("apply")]),t._v(" 方法去使用。")]),t._v(" "),n("p",[t._v("下面自定义一个类，类当中 "),n("code",[t._v("apply")]),t._v(" 方法会在 "),n("code",[t._v("webpack")]),t._v(" 启动加载执行插件时自动调用。"),n("code",[t._v("apply")]),t._v(" 方法接收一个 "),n("code",[t._v("compiler")]),t._v(" 对象参数，这个 "),n("code",[t._v("compiler")]),t._v(" 对象是 "),n("code",[t._v("webpack")]),t._v(" 在工作中最核心的对象。这个对象包含了此次构建的所有信息，我们也是通过这个对象去注册钩子函数。")]),t._v(" "),n("p",[t._v("接下来是要实现一个清除打包后 "),n("code",[t._v("bundle")]),t._v(" 文件没用的注释的功能。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(420),alt:"02"}})]),t._v(" "),n("p",[t._v("接下来就是要明确钩子执行的时机，以便于挂载我们自定义的任务。查看官网可以知道，"),n("code",[t._v("webpack")]),t._v(" 的 "),n("code",[t._v("emit")]),t._v(" 钩子会在即将往目录输出文件的时候执行。")]),t._v(" "),n("p",[t._v("通过 "),n("code",[t._v("compiler")]),t._v(" 的 "),n("code",[t._v("hooks")]),t._v(" 属性访问到 "),n("code",[t._v("emit")]),t._v(" 钩子，通过 "),n("code",[t._v("tap")]),t._v(" 方法去注册一个钩子函数。"),n("code",[t._v("tap")]),t._v(" 方法接收两个参数，第一个参数是插件的名称，这里是 "),n("code",[t._v("MyPlugin")]),t._v("；第二个参数是挂载到钩子上的函数，函数接收一个参数 "),n("code",[t._v("compitaion")]),t._v("，可以理解为此次打包的上下文，此次打包的结果都放在这个对象中。通过 "),n("code",[t._v("compitation.assets")]),t._v(" 属性可以获取到此次打包要输出的所有资源文件信息，这里 "),n("code",[t._v("compitation.assets")]),t._v(" 属性值是一个对象，对象的键就是每个文件的名称。")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/jwchan1996/webpack-play/blob/main/07-plugin-theory",target:"_blank",rel:"noopener noreferrer"}},[t._v("示例代码仓库"),n("OutboundLink")],1)]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyPlugin")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("compiler")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MyPlugin 启动'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    compiler"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hooks"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("emit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("tap")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MyPlugin'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("compilation")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compilation -> 可以理解为此次打包的上下文")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" name "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" compilation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assets"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(name)   // 文件名称")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(compilation.assets[name].source())  // 文件对应的内容")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 匹配 js 文件,对文件中的无用注释进行替换")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("endsWith")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.js'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" contents "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" compilation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assets"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("source")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对文件内容进行正则替换")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" withoutComments  "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" contents"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\/\\*\\*+\\*\\//g")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n          "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 替换后的文件内容覆盖原结果文件")]),t._v("\n          compilation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assets"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("source")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" withoutComments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("size")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" withoutComments"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n          "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("通过判断处理 "),n("code",[t._v("js")]),t._v(" 文件，获取文件的内容，以正则匹配的方式去替换掉代码中的注释。其中正则是以全局模式去替换，然后将替换完的结果覆盖到原有的结果当中。需要注意的是文件对象要求包含 "),n("code",[t._v("source")]),t._v(" 方法以及 "),n("code",[t._v("size")]),t._v(" 方法。")]),t._v(" "),n("div",{staticClass:"language-javascript extra-class"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// webpack.config.js")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyPlugin")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nmodule"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  plugins"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyPlugin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("将 "),n("code",[t._v("MyPlugin")]),t._v(" 实例化对象配置到 "),n("code",[t._v("plugins")]),t._v(" 属性，然后运行打包命令 "),n("code",[t._v("yarn build")]),t._v("，即可看到打包后文件的无用代码头注释被清除了。")]),t._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),n("p",[n("code",[t._v("webpack")]),t._v(" 插件是通过在 "),n("code",[t._v("webpack")]),t._v(" 生命周期的钩子上挂载任务函数从而实现扩展的。")])])}),[],!1,null,null,null);s.default=e.exports}}]);